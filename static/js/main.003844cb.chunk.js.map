{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleDelete","handleEdit","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","Fragment","map","key","length","ExpenseForm","handleCharge","hadleAmount","handleSubmit","edit","onSubmit","htmlFor","type","value","onChange","name","placeholder","Alert","text","initialExpense","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","itemExpenses","item","singleExpense","uuid","tempExpenses","filter","find","reduce","acc","current","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.003844cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdDelete,MdEdit} from 'react-icons/md';\r\n\r\n\r\nconst ExpenseItem = ({expense,handleDelete,handleEdit}) => {\r\n    const {id,charge,amount} = expense;\r\n    return (\r\n        <li className=\"item\">\r\n            <div  className=\"info\">\r\n                <span className=\"expense\">{charge}</span>\r\n                <span className=\"amount\">$ {amount}</span>\r\n            </div>\r\n            <div>\r\n                <button className=\"edit-btn\" aria-label=\"edit button\" onClick={()=>handleEdit(id)}> <MdEdit /> </button>\r\n                <button className=\"clear-btn\" aria-label=\"delete button\" onClick={()=>handleDelete(id)}> <MdDelete /> </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default ExpenseItem;","import React from 'react'\r\nimport Item from './ExpenseItem';\r\nimport {MdDelete} from 'react-icons/md';\r\n\r\nconst ExpenseList = ({expenses,clearItems,handleDelete,handleEdit}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ul className=\"list\">\r\n            {\r\n                expenses.map((expense)=>{\r\n                    return <Item key={expense.id} expense={expense} handleDelete={handleDelete} handleEdit={handleEdit} />\r\n                })\r\n            }\r\n            </ul>\r\n            {expenses.length>0 && <button className=\"btn\" onClick={clearItems}> Clear Expenses <MdDelete className=\"btn-icon\" /> </button>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExpenseList;","import React from 'react'\r\nimport {MdSend} from 'react-icons/md';\r\n\r\n\r\nconst ExpenseForm = ({amount,charge,handleCharge,hadleAmount,handleSubmit,edit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-center\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"charg\">charge</label>\r\n                    <input type=\"text\" value={charge} onChange={handleCharge} className=\"form-control\" id=\"charge\" name=\"charge\" placeholder=\"e.g. rent\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"amount\">amount</label>\r\n                    <input type=\"number\" value={amount} onChange={hadleAmount} className=\"form-control\" id=\"amount\" name=\"amount\" placeholder=\"e.g. 100\" />\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"btn\"> {edit ? 'Edit' : 'Submit'} <MdSend className=\"btn-icon\" /> </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default ExpenseForm;","import React from 'react'\r\n\r\nconst Alert = ({type,text}) => {\r\n\r\n\r\n    return (\r\n        <div className={`alert alert-${type}`}>{text}</div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import React,{useState,useEffect} from 'react';\nimport './App.css';\n\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseForm from './components/ExpenseForm';\nimport Alert from './components/Alert';\nimport uuid from 'react-uuid';\n\n\n// const initialExpense = [\n//   {id:uuid(),charge:\"rent\",amount:2000},\n//   {id:uuid(),charge:\"car payment\",amount:700},\n//   {id:uuid(),charge:\"cridit card bill\",amount:1200}\n// ];\nconst initialExpense = localStorage.getItem('expenses') ? JSON.parse(localStorage.getItem('expenses')) : [];\n// console.log(initialExpense);\n\n\n\n\nfunction App() {\n\n  // ********** state values ********** \n  const [expenses,setExpenses]    = useState(initialExpense);\n  const [charge,setCharge]        = useState('');\n  const [amount,setAmount]        = useState('');\n  const [alert,setAlert]          = useState({show:false});\n  const [edit,setEdit]            = useState(false);\n  const [id,setId]                = useState(0)\n\n  // ******************** use effect ****************** //\n\n  useEffect(()=>{\n    console.log(\"effected\")\n    localStorage.setItem(\"expenses\",JSON.stringify(expenses))\n  },[expenses])\n\n\n  // ************** functions **************\n\n\n  // charge\n  const handleCharge = e => {\n    setCharge(e.target.value);\n  }\n\n  // amount \n  const hadleAmount = e => {\n    setAmount(e.target.value);\n  }\n\n\n  //  on submit form\n  const handleSubmit = e => \n  {\n    e.preventDefault();\n    // console.log(charge,amount)\n    if(charge !== '' && amount > 0)\n    {\n      if(edit)\n      {\n          const  itemExpenses = expenses.map((item)=>{\n            return item.id === id ? {...item,charge,amount} : item;\n          })\n          setExpenses(itemExpenses);\n          setEdit(false)\n          setId(0);\n          handleAlert({type:\"success\",text:\"item Edited\"})\n\n      }\n      else\n      {\n\n        const singleExpense = {id:uuid(),charge,amount}\n        setExpenses([...expenses,singleExpense])\n        handleAlert({type:\"success\",text:\"item added\"})\n      }\n      \n      setCharge('');\n      setAmount('');\n\n    }\n    else \n    {\n      handleAlert({type:\"danger\",text:\" charge can't be empty value and amount value has to be bigger than zero\"})\n    }\n  }\n\n  // alert when success or fail\n  const handleAlert = ({type,text}) => {\n    setAlert({show:true,type,text})\n    setTimeout(()=>{\n      setAlert({show:false})\n    },3000)\n  }\n\n\n  // clear all items \n  const clearItems = ()=>{\n    setExpenses([])\n    handleAlert({type:'danger',text:'All Items Deleted'})\n\n  }\n\n  // delete item \n  const handleDelete = (id)=>{\n\n      let tempExpenses = expenses.filter(item => item.id !== id);\n      setExpenses(tempExpenses);\n      handleAlert({type:'danger',text:'Item Deleted'})\n  }\n\n  // delete edit \n  const handleEdit = (id)=>\n  {\n    let expense = expenses.find(item=> item.id === id)\n    let {charge,amount} = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n    // console.log(`item edit ${id}`)\n  }\n  \n\n\n\n  // console.log(expenses)\n  return (\n    <React.Fragment>\n\n        {alert.show && <Alert type={alert.type} text={alert.text} />}\n        \n        <h1>Budget Calculator</h1>\n        <main className=\"App\">\n          <ExpenseForm charge={charge} amount={amount} handleCharge={handleCharge} hadleAmount={hadleAmount} \n          handleSubmit={handleSubmit} edit={edit} />\n          <ExpenseList expenses={expenses}  handleDelete={handleDelete} handleEdit={handleEdit}  clearItems={clearItems} />\n        </main>\n        <h1>\n          Total Spending : <span className=\"total\">\n            ${expenses.reduce((acc,current)=>{\n                return acc +=  +current.amount\n            },0)}\n          </span>\n        </h1>\n        \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}